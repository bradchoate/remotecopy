#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use IO::Socket;
use Digest::MD5 qw(md5_hex);

my $secret = generate_secret();

my $growlnotify_location = `/usr/bin/which growlnotify`;
chomp $growlnotify_location;

my $sock = IO::Socket::INET->new(
    Proto     => 'tcp',
    LocalAddr => '127.0.0.1',
    LocalPort => 12345,
    ReuseAddr => 1,
    Listen    => 1
) or die "couldn't create socket: $!";

while ( my $client = $sock->accept() ) {

    print $client "HELLO 0.1\n";

    my $buffer;
    my $copydata;
    $client->recv( $buffer, 512 );

    my ( $client_proto_version, $client_secret ) = split( /:/, $buffer );
    if ( $client_proto_version == 1 ) {
        if ( $client_secret eq $secret ) {
            print $client "SUCCESS\n";
        }
        else {
            print $client "FAILURE AUTH\n";
            copy($secret);
            notify(
                "Unauthenticated copy attempt, copied secret to clipboard");
            $client->close();
            next;
        }
    }
    else {
        print $client "FAILURE PROTOVER\n";
        notify(
            sprintf(
                "Unknown client version %d, rejecting.\nData: %s",
                $client_proto_version, $buffer
            )
        );
        $client->close();
        next;
    }

    $buffer = '';

    do {
        $copydata .= $buffer;
        $client->recv( $buffer, 512 );
    } while ($buffer);

    #print STDERR "all data: $copydata\n";

    copy($copydata);
    notify("Remote copy.");

    $client->close();
}

sub copy {
    my $copydata = shift;

    my $pbcopy;
    open( $pbcopy, "|pbcopy" ) or die "unable to open $!";
    print $pbcopy $copydata;
    close($pbcopy);
}

sub notify {
    my $message = shift;

    if ($growlnotify_location) {
        system( $growlnotify_location, "-m", $message );
    }
    else {
        print "$message\n";
    }
}

sub generate_secret {
    print "enter hash seed: \n";
    my $salt = <>;

    return 'rc-' . md5_hex( $salt . time );
}
